[{"content":" Here goes all the articles I\u0026rsquo;ve published so far.. ","date":"23 December 2023","permalink":"/posts/","section":"Posts","summary":"Here goes all the articles I\u0026rsquo;ve published so far.","title":"Posts"},{"content":"ðŸŽ¤ Speaker at CNCG Kochi, DevOpsMalayalam and AWS Community Days Kochi.\nðŸ‘‰ My Talks\nðŸ‘‰ My Kubernetes Notes\n","date":"23 December 2023","permalink":"/","section":"Welcome to My Blog! ðŸŽ‰","summary":"ðŸŽ¤ Speaker at CNCG Kochi, DevOpsMalayalam and AWS Community Days Kochi.","title":"Welcome to My Blog! ðŸŽ‰"},{"content":"TBD\n","date":"8 December 2023","permalink":"/authors/ansilh/","section":"Authors Taxonomy Listing Example","summary":"TBD","title":"Ansil H"},{"content":"A quick example of how to start using author taxonomies in your articles.\n","date":"8 December 2023","permalink":"/authors/","section":"Authors Taxonomy Listing Example","summary":"A quick example of how to start using author taxonomies in your articles.","title":"Authors Taxonomy Listing Example"},{"content":"","date":"8 December 2023","permalink":"/tags/ebpf/","section":"Tags","summary":"","title":"ebpf"},{"content":"","date":"8 December 2023","permalink":"/series/ebpf/","section":"Series","summary":"","title":"eBPF"},{"content":" This article series is based on my journey to demystify eBPF. Pre-requisites # To get the most out of this article, it\u0026rsquo;s helpful to have some background in Linux networking and packet tracing with tcpdump. Some of the internals were intentionally excluded to simplify the topic.\nClassic BPF # Let\u0026rsquo;s take the scenario were you wanted to observe all ARP packet coming to the NIC. The packet first lands in the network device hardware and then later will be placed in an receive queue (RX_RING) inside the Kernel.\nFor a user to see ARP packets, packets needs to be copied from kernel space to the user space. Then each of the packets needs to be filtered based on its packet type; ARP.\nIf the system is going to copy all packets get\u0026rsquo;s into RX_RING to user space and then checking for a matching packet type, system have to do packet copy from kernel space to users pace. Switching CPU from kernel space to user space to copy packet is inefficient and will affect the system performance.\nSo how can we filter packets which are - on-the way - within the kernel space and copy only the matching packets to user space?\nHere comes the BPF or Berkley Packet Filter.\nThe BPF virtual machine is a pseudo VM inside the Linux kernel. For the sake of simplicity, you can consider this as a JavaScript engine inside your browser!\nOne of the tool in Linux that uses BPF is the tcpdump which utilises the BPF for packet filtering.\nThe BPF VM supports a limited set of instructions and there are many restrictions to the usage as well.\nBelow are the registers in BPF VM (or pseudo-machine)\nA 32bit wide accumulator [A] where the contents of the packet get loaded. A 32bit wide index register [X]. A scratch memory area of 16 32bit registers. A program counter. The filters we pass to tcpdump command will be converted into \u0026ldquo;byte code\u0026rdquo; and then injected directly into the kernel.(More about byte code will be coming later in this article.)\nThe load instructions loads the packet data to accumulator, and then we can examine the packets in BPF VM.\nLet\u0026rsquo;s examine the code generated by the tcpdump command that filters the ARP packets coming to interface ens33.\n[root@localhost ~]# tcpdump -i ens33 arp -d (000) ldh [12] (001) jeq #0x806 jt 2 jf 3 (002) ret #262144 (003) ret #0 [root@localhost ~]# Explanation\n(000) ldh - Load half word (16 bits) from index 12 of the packet ; skip 6 byte dst mac and 6 byte src mac. (001) jeq - If accumulator value is 0x806 ; ie ARP packet, then jump to 2 else jump to 3 (002) ret - Return the contents with buffer size 262144 ; ie entire packet or [max snapshot length](https://github.com/the-tcpdump-group/tcpdump/blob/tcpdump-4.9/netdissect.h#L263) (003) ret - Return nothing to the users pace You can find more details of the inner working of BPF in this Usenix paper\nSo the above filter skips the source and destination mac fields and then loads 16bits from the index 12 which is the packet type.\nSo the 16bits - 0x806 (0000100000000110) at offset 12 will try to match ARP packet!\nFew points to note;\nThe Ethernet type II packet have below format; Ethernet packets are big-endain.\nIn a 32bit system, a full word is 32bit, half word is 16bit.\n1 byte = 8bits, 2 byte = 16bits\nYou can find the Ethernet type hex representation of packet types in IANA\n------------------------------------------------------------------------------------------------------------------------------------------------ Ethertype (decimal) Ethertype (hex) Exp. Ethernet (decimal) Exp. Ethernet (octal) Description Reference ------------------------------------------------------------------------------------------------------------------------------------------------ 2054 0806 - - Address Resolution Protocol (ARP) [RFC7042] ------------------------------------------------------------------------------------------------------------------------------------------------ The Byte Code # The BPF program we discussed above can be converted to byte code.\nWhat is byte code?\nA compact, platform-independent instruction set designed for execution by a virtual machine, rather than directly by a physical CPU. In this case the VM is a BPF pseudo VM sitting inside the Kernel.\nThe user space can inject this bytecode to the BPF pseudo VM and the VM will convert that to the architecture dependant assembly code which can be executed directly on the hardware.\nWe can generate the bytecode of the BPF instruction in tcpdump itself.\n[root@localhost ~]# tcpdump -i ens33 arp -ddd 4 40 0 0 12 21 0 1 2054 6 0 0 262144 6 0 0 0 The bytecode can be injected into the system in different ways. The tcmpdump utility have it\u0026rsquo;s own logic to do this operation.\nWith that we concludes the Part - 1 of eBPF for Linux Admins here.\nIn the next part, we will discuss eXpressDataPath - XDP and eBPF.\n","date":"8 December 2023","permalink":"/posts/01-ebpf-for-linux-admins-part1/","section":"Posts","summary":"This article series is based on my journey to demystify eBPF.","title":"eBPF for Linux Admins: Part I"},{"content":"","date":"8 December 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"8 December 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]